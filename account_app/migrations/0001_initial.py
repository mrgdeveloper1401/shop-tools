# Generated by Django 5.2.4 on 2025-07-31 15:59

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_name', models.CharField(max_length=150, verbose_name='state name')),
            ],
            options={
                'db_table': 'state',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(editable=False, null=True)),
                ('mobile_phone', models.CharField(blank=True, max_length=15, null=True, unique=True, verbose_name='mobile phone')),
                ('username', models.CharField(blank=True, max_length=150, null=True, verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('activation_key', models.CharField(blank=True, max_length=100, null=True)),
                ('key_expires', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'ordering': ('-id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PrivateNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(editable=False, null=True)),
                ('title', models.CharField(max_length=255)),
                ('notif_type', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('notifi_redirect_url', models.CharField(blank=True, max_length=255, null=True)),
                ('body', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='private_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_private_notification',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(editable=False, null=True)),
                ('display_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='display name')),
                ('full_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='full name')),
                ('profile_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='profile_image', to='core_app.image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_profile',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='city name')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cities', to='account_app.state')),
            ],
            options={
                'db_table': 'city',
            },
        ),
        migrations.CreateModel(
            name='TicketRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(editable=False, null=True)),
                ('title_room', models.CharField(help_text='عنوان چت روم تیکت', max_length=100)),
                ('subject_room', models.CharField(help_text='موضوع تیکت', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('is_close', models.BooleanField(default=False)),
                ('user', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ticker_room', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ticker_room',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(editable=False, null=True)),
                ('ticket_body', models.TextField(verbose_name='متن تیکت')),
                ('ticket_file', models.FileField(blank=True, null=True, upload_to='ticket/%Y/%m/%d')),
                ('is_active', models.BooleanField(default=True)),
                ('sender', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.PROTECT, related_name='ticket_sender', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='account_app.ticketroom')),
            ],
            options={
                'db_table': 'ticket',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(editable=False, null=True)),
                ('title', models.CharField(blank=True, help_text='مثلاً خانه، محل کار، ...', max_length=100, null=True)),
                ('address_line', models.CharField(help_text='نشانی کامل (خیابان، پلاک، ...)', max_length=255)),
                ('postal_code', models.CharField(db_index=True, max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='عرض جغرافیایی', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='طول جغرافیایی', max_digits=9, null=True)),
                ('is_default', models.BooleanField(default=False, help_text='آیا آدرس پیش\u200cفرض کاربر است؟')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_address_city', to='account_app.city')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_address_state', to='account_app.state')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_user_address',
                'ordering': ('-id',),
            },
        ),
    ]
